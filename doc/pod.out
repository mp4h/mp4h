
;;;
;;;    Sectioning
;;;
<define-tag section>=head1 <upcase %attributes>
</define-tag>
<define-tag subsection>=head2 %attributes
</define-tag>

;;;
;;;    Common names
;;;
<define-tag program>B_LT_%attributes_GT_</define-tag>
<define-tag mp4h><program mp4h></define-tag>
<define-tag WML><program WML></define-tag>
<define-tag m4><program m4></define-tag>
<define-tag Meta-HTML><program Meta-HTML></define-tag>

<define-tag var>I_LT_%attributes_GT_</define-tag>
<define-tag value>C_LT_%attributes_GT_</define-tag>
<define-tag command>C_LT_%attributes_GT_</define-tag>
<define-tag full-command>C_LT_E_LT_lt_GT_%attributesE_LT_gt_GT__GT_</define-tag>
<define-tag left-angle>_LT_</define-tag>
<define-tag right-angle>_GT_</define-tag>
<define-tag slash>C_LT_/_GT_</define-tag>
<define-tag true>C_LT_true_GT_</define-tag>
<define-tag optflag>C_LT_-%attributes_GT_</define-tag>
<define-tag file>C_LT_%attributes_GT_</define-tag>
<define-tag anchor></define-tag>

<define-tag tag:slash><slash></define-tag>
<define-tag tag:V>C_LT_V_GT_</define-tag>

;;;
;;;    Alias for writing URLs
;;;
<define-tag URL whitespace=delete>
<preserve name>
<preserve src>
<set-var %attributes>
<get-var name> C_LT_E_LT_lt_GT_URL:<get-var src>E_LT_gt_GT__GT_
<restore src>
<restore name>
</define-tag>

;;;
;;;    Header of the POD document
;;;
<define-tag header>
=pod

=head1 NAME

<get-var title>

=head1 VERSION

<document-version>

</define-tag>

;;;
;;;    Footer of the POD document
;;;
<define-tag footer>

=cut

</define-tag>

;;;
;;;    Description of MP4H tags
;;;
<define-tag tag:description endtag=required>;;;
<preserve complex>;;;
<preserve verbatim>;;;
<set-var complex=*>;;;
<set-var verbatim=*>;;;
<set-var %attributes>;;;
<set-var list-attributes="%body">;;;

=over 2

=item * %0 ;;;
   <if <get-var complex> "" "<tag:slash>">;;;
   <if <get-var verbatim> "" "<tag:V>">

<foreach attr list-attributes>;;;
<if <get-var attr> <group C_LT_<get-var attr>_GT_ " ">>;;;
</foreach>

=back

<restore verbatim>;;;
<restore complex>;;;
</define-tag>

<define-tag attributes:description endtag=required>

=over 4

%body

=back

</define-tag>

<define-tag attributes:item>
=item <attribute %0>

</define-tag>

;;;
;;;    Paragraphs
;;;
<define-tag para endtag=required>

%body

</define-tag>

;;;
;;;    Notes
;;;
<define-tag note endtag=required>;;;
<para>B_LT_<lang:note>:_GT_ %body</para></define-tag>

;;;
;;;    Example of MP4H code
;;;
<eol-comment "###">
<define-tag three-colon>;;;</define-tag>
<define-tag example endtag=required attributes=verbatim whitespace=delete>
<set-var-verbatim verb-body=%ubody>
<subst-in-var verb-body "<" "_LT_">
<subst-in-var verb-body ">" "_GT_">
<subst-in-var verb-body "^\n*" "" singleline=true>
<subst-in-var verb-body "^(.)" "   \\1">
<set-var body=%body>
<subst-in-var body "<" "_LT_">
<subst-in-var body ">" "_GT_">
<subst-in-var body "<three-colon>[^\n]*\n[ \t]*" "" singleline=true>
<subst-in-var body "<three-colon>$" "">
<subst-in-var body "^\n*" "" singleline=true>
<subst-in-var body "^(.)" "   \\1">
<group "<lang:example-source>:

<get-var-once verb-body>

<lang:example-output>:

<get-var-once body>

">
</define-tag>
<eol-comment ";;;">

;;;
;;;    Verbatim code
;;;
<define-tag code endtag=required attributes=verbatim>
<subst-in-string "%ubody" "^(.)" "   \\1">
</define-tag>

;;;
;;;    Attributes
;;;
<define-tag attribute>C_LT_%attributes_GT_</define-tag>

;;;
;;;    HTML Comments
;;;
<define-tag html:comment endtag=required>
_LT_!--%body--_GT_
</define-tag>

<define-tag pre endtag=required>
%body
</define-tag>

<define-tag option-list endtag=required>

=over 2

%body

=back

</define-tag>

<define-tag option endtag=required>

=item %attributes

%body

</define-tag>

<define-tag optmand>C_LT_%attributesC_GT_</define-tag>

<define-tag optopt>C_LT_[%attributes]C_GT_</define-tag>

;;;
;;;   Macros to draw a numbered list, with refs.
;;;
<define-tag step-by-step endtag=required>
<set-var __step=>;;;
<set-var __istep=0>;;;
<define-tag step-ref></define-tag>;;;
<define-tag step><array-append %%0 __step></define-tag>;;;
<set-var dummy="%body">;;;
<define-tag step>
=item <increment __istep><get-var __istep>. </define-tag>
<define-tag step-ref><add 1 <array-member %%0 __step>></define-tag>;;;

=over 2

%body

=back

</define-tag>
